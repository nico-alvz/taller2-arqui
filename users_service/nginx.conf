# /etc/nginx/nginx.conf

worker_processes auto;
error_log /dev/stderr debug;

events {
  worker_connections 1024;
}

http {
  # ──────────────────────────────────────────────────
  # 1) Defino el formato de logs "main" (necesario
  #    para poder usarlo en access_log más abajo)
  # ──────────────────────────────────────────────────
  log_format main '$remote_addr - $remote_user [$time_local] '
                  '"$request" $status $body_bytes_sent '
                  '"$http_referer" "$http_user_agent"';

  # ──────────────────────────────────────────────────
  # 2) Hago que los logs de acceso salgan por stdout
  #    y los errores por stderr, para que Render los
  #    muestre en su consola de despliegue.
  # ──────────────────────────────────────────────────
  access_log  /dev/stdout  main;
  error_log   /dev/stderr  debug;

  server {
    # ──────────────────────────────────────────────────
    # 3) Escucho HTTP/1.1 en el puerto que Render escanea
    #    (en tu caso 10000)
    # ──────────────────────────────────────────────────
    listen 10000;

    # ──────────────────────────────────────────────────
    # Health-check: responde 200 y texto fijo
    # ──────────────────────────────────────────────────
    location = /healthz {
      add_header Content-Type text/plain;
      return 200 'OK - Render health check';
    }

    # ──────────────────────────────────────────────────
    # gRPC proxy: todo lo demás lo paso a tu Python
    # (HTTP/2 se negocia internamente vía grpc_pass).
    # ──────────────────────────────────────────────────
    location / {
      grpc_pass grpc://127.0.0.1:50052;
      error_page 502 = /error502grpc;
    }

    # ──────────────────────────────────────────────────
    # En caso de error con grpc_pass, mapeo a código gRPC
    # ──────────────────────────────────────────────────
    location = /error502grpc {
      internal;
      default_type application/grpc;
      add_header grpc-status 14;
      add_header content-length 0;
      return 204;
    }
  }
}
